name: Push Variables to Repositories

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Target repository (format: org/repo). Leave blank to update all listed repos.'
        required: false
        type: string
      dry_run:
        description: 'If true, only log actions without changes'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  push-variables:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GHEC_BOT_TOKEN }}
      CENTRAL_REPO: Raja-practise/test-repo
      INPUT_REPO: ${{ github.event.inputs.repo }}
      DRY_RUN: ${{ github.event.inputs.dry_run }}

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Authenticate gh CLI
        run: echo "$GH_TOKEN" | gh auth login --with-token

      - name: Validate repositories file
        run: |
          if [ ! -f "repositories.txt" ]; then
            echo "‚ùå repositories.txt not found!"
            exit 1
          fi
          if [ ! -s "repositories.txt" ]; then
            echo "‚ùå repositories.txt is empty!"
            exit 1
          fi

      - name: Push variables to target repositories
        run: |
          set -euo pipefail

          echo "üìç Using Central Repo: $CENTRAL_REPO"
          if [ -n "$INPUT_REPO" ]; then
            echo "üéØ Target Repo (if set): $INPUT_REPO"
          else
            echo "üì¶ Target Repo: all listed in repositories.txt"
          fi
          echo "üß™ Dry Run Mode: $DRY_RUN"
          echo

          # Determine which repos to update
          if [ -n "$INPUT_REPO" ]; then
            mapfile -t REPOS <<< "$INPUT_REPO"
          else
            mapfile -t REPOS < repositories.txt
          fi

          # Pull all variables from central repo into JSON
          echo "üîê Pulling variables from central repo: $CENTRAL_REPO"
          VAR_JSON=$(gh variable list -R "$CENTRAL_REPO" --json name,value | jq -r '[.[] | { (.name): .value }] | add')

          if [ -z "$VAR_JSON" ] || [ "$VAR_JSON" = "{}" ]; then
            echo "‚ùå No variables found in central repository."
            exit 1
          fi

          echo

          for FULL_REPO in "${REPOS[@]}"; do
            echo "üõ†Ô∏è  Processing $FULL_REPO..."
            ORG_NAME=$(echo "$FULL_REPO" | cut -d'/' -f1)
            REPO_NAME=$(echo "$FULL_REPO" | cut -d'/' -f2)
            VAR_PREFIX=$(echo "${ORG_NAME}_${REPO_NAME}_VARIABLE_" | tr '-' '_' | tr '[:lower:]' '[:upper:]')

            echo "üîç Using VAR_PREFIX: $VAR_PREFIX"

            # Loop through repo-vars.txt and find matching keys in VAR_JSON
            FOUND=0
            while read -r VAR_KEY; do
              VAR_NAME="${VAR_PREFIX}${VAR_KEY}"
              VALUE=$(echo "$VAR_JSON" | jq -r --arg key "$VAR_NAME" '.[$key]')
              if [ "$VALUE" != "null" ]; then
                echo "‚úÖ Found: $VAR_NAME"
                FOUND=1
                if [ "$DRY_RUN" == "true" ]; then
                  echo "üìù [Dry-run] Would set $VAR_NAME in $FULL_REPO"
                else
                  gh variable set "$VAR_NAME" -R "$FULL_REPO" -b "$VALUE"
                  echo "üöÄ Set $VAR_NAME in $FULL_REPO"
                fi
              else
                echo "‚ö†Ô∏è Skipped: No variable named '$VAR_NAME' in central repository."
              fi
            done < repo-vars.txt

            if [ $FOUND -eq 0 ]; then
              echo "‚ö†Ô∏è No matching variables found for prefix $VAR_PREFIX"
            fi

            echo "‚úîÔ∏è  Done: $FULL_REPO"
            echo "-----------------------------------------"
          done
