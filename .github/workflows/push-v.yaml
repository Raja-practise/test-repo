name: Push Variables to Repositories

on:
  workflow_dispatch:
    inputs:
      target_repository:
        description: 'Target repository (format: team_name/repo_name). Leave blank to update all listed repos.'
        required: false
        type: string
      dry_run:
        description: 'If true, perform a dry-run (no changes, only log actions).'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  push-variables:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GHEC_BOT_TOKEN }}
      CENTRAL_REPO: Raja-practise/test-repo
      INPUT_REPO: ${{ github.event.inputs.target_repository }}
      DRY_RUN: ${{ github.event.inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate repositories file
        run: |
          if [ ! -f "repositories.txt" ]; then
            echo "‚ùå repositories.txt not found!"
            exit 1
          fi
          if [ ! -s "repositories.txt" ]; then
            echo "‚ùå repositories.txt is empty!"
            exit 1
          fi

      - name: Load and push variables to target repositories
        run: |
          set -euo pipefail

          echo "üìç Using Central Repo: $CENTRAL_REPO"
          echo "üéØ Target Repo (if set): $INPUT_REPO"
          echo "üß™ Dry Run Mode: $DRY_RUN"
          echo ""

          # Get variables from the central repo
          variables=$(gh variable list -R "$CENTRAL_REPO" --json name,value | jq -r '[.[] | { (.name): .value }] | add')

          if [ "$INPUT_REPO" != "" ]; then
            TARGET_REPOS=("$INPUT_REPO")
          else
            mapfile -t TARGET_REPOS < repositories.txt
          fi

          for FULL_REPO in "${TARGET_REPOS[@]}"; do
            echo "üì¶ Processing $FULL_REPO..."

            ORG_NAME=$(echo "$FULL_REPO" | cut -d'/' -f1)
            REPO_NAME=$(echo "$FULL_REPO" | cut -d'/' -f2)

            # Normalize prefix to match variable names
            VAR_PREFIX=$(echo "${ORG_NAME}_variable_" | tr '[:lower:]' '[:upper:]')
            echo "üîé Using VAR_PREFIX: $VAR_PREFIX"

            VARS_TO_PUSH=$(jq -r --arg prefix "$VAR_PREFIX" '
              to_entries | map(select(.key | startswith($prefix))) | from_entries
            ' <<< "$variables")

            if [ "$(jq length <<< "$VARS_TO_PUSH")" -eq 0 ]; then
              echo "‚ö†Ô∏è No matching variables found for $FULL_REPO"
              continue
            fi

            for var in $(echo "$VARS_TO_PUSH" | jq -r 'keys[]'); do
              value=$(echo "$VARS_TO_PUSH" | jq -r --arg var "$var" '.[$var]')

              if [ "$DRY_RUN" == "true" ]; then
                echo "üîç [Dry-run] Would set variable '$var' in $FULL_REPO"
              else
                gh variable set "$var" -R "$FULL_REPO" -b "$value"
                echo "‚úÖ Set variable '$var' in $FULL_REPO"
              fi
            done

            echo "‚úÖ Completed processing $FULL_REPO"
            echo "-------------------------------------"
          done
