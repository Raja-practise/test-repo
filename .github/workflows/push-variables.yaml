name: Push Variables to Repositories

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Full repository name, e.g., raja-practise/test1-repo-new'
        required: true
        type: string

jobs:
  push-variables:
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      github.ref_name == 'main' &&
      github.event.repository.fork == false
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GHEC_BOT_TOKEN }}
      FULL_REPO: ${{ github.event.inputs.repo }}
    steps:
      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required files
        run: |
          if [ ! -s "repositories.txt" ]; then
            echo "Error: repositories.txt is missing or empty"
            exit 1
          fi
          if [ ! -s "repo-vars.txt" ]; then
            echo "Error: repo-vars.txt is missing or empty"
            exit 1
          fi

      - name: Load and filter variables
        id: build-vars
        run: |
          ORG_NAME=$(echo "$FULL_REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$FULL_REPO" | cut -d'/' -f2)
          REPO_MATCH="$REPO_NAME"                        # used to match against repositories.txt
          VAR_PREFIX=$(echo "$REPO_NAME" | tr '[:lower:]-' '[:upper:]_')  # normalize to TEST1_REPO_NEW

          echo "ORG_NAME: $ORG_NAME"
          echo "REPO_NAME: $REPO_NAME"
          echo "Normalized VAR_PREFIX: $VAR_PREFIX"

          declare -A VARS_MAP

          while read -r var_name; do
            [[ -z "$var_name" || "$var_name" == \#* ]] && continue

            if [[ "$var_name" == ${VAR_PREFIX}_VARIABLE_* ]]; then
              short_name="${var_name#${VAR_PREFIX}_VARIABLE_}"
              final_key="${REPO_NAME}-${short_name}"

              value=$(gh variable get "$var_name" --repo "$GITHUB_REPOSITORY" --json value -q .value || true)

              if [[ -n "$value" ]]; then
                VARS_MAP["$final_key"]="$value"
              fi
            fi
          done < repo-vars.txt

          if [ ${#VARS_MAP[@]} -eq 0 ]; then
            echo "No matching variables found for repo $FULL_REPO"
            exit 0
          fi

          json_output="{"
          first=true
          for k in "${!VARS_MAP[@]}"; do
            [[ "$first" == true ]] && first=false || json_output+=","
            json_output+="\"$k\":\"${VARS_MAP[$k]}\""
          done
          json_output+="}"
          echo "$json_output" > vars.json
          cat vars.json

      - name: Push variables to target repos
        run: |
          ORG_NAME=$(echo "$FULL_REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$FULL_REPO" | cut -d'/' -f2)

          readarray -t TARGET_REPOS < <(awk -F'/' -v t="$REPO_NAME" '$2 == t { print $0 }' repositories.txt)

          if [ ${#TARGET_REPOS[@]} -eq 0 ]; then
            echo "No repositories found for $REPO_NAME"
            exit 0
          fi

          for repo in "${TARGET_REPOS[@]}"; do
            echo "Processing $repo..."
            if ! gh repo view "$repo" >/dev/null 2>&1; then
              echo "Repository $repo not accessible"
              continue
            fi

            for key in $(jq -r 'keys[]' vars.json); do
              value=$(jq -r --arg k "$key" '.[$k]' vars.json)
              if [ -n "$value" ]; then
                echo "Setting $key in $repo"
                gh variable set "$key" -R "$repo" -b "$value"
              fi
            done
          done
