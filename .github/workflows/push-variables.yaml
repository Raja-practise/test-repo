name: Push Repository Variables
on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Target repository (format: team_name/repo_name). Leave blank to update all listed repos."
        required: false
      dry_run:
        description: "If 'true', perform a dry-run (no changes, only log actions)."
        default: "false"
        required: false

permissions:
  contents: read   # allow reading repo files (repositories.txt, allow-lists)
  # Note: Use a PAT for cross-repo changes (provided via secrets) since GITHUB_TOKEN is scoped to this repo.

jobs:
  sync-variables:
    runs-on: ubuntu-latest
    steps:
      - name: Check out central repository
        uses: actions/checkout@v3

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.SYNC_PAT }}  # Personal Access Token with repo scope for target repos
        run: gh auth status

      - name: Push variables to target repositories
        env:
          CENTRAL_REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          # Gather input values
          TARGET_REPO="${{ github.event.inputs.repo }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"

          # Determine list of repositories to process
          if [ -n "$TARGET_REPO" ]; then
            repos_list="$TARGET_REPO"
          else
            repos_list=$(grep -v '^#' repositories.txt | sed '/^\s*$/d')  # all non-empty, non-comment lines
          fi

          # Read allowed variable names into an array
          mapfile -t ALLOWED_VARS < repo-vars.txt

          for repo in $repos_list; do
            team="${repo%%/*}"
            repo_name="${repo#*/}"
            # Normalize team name: lowercase and replace '-' with '_'
            norm_team="$(echo "$team" | tr '[:upper:]' '[:lower:]' | tr '-' '_')"

            echo "Updating variables for $repo (team: $team, normalized key prefix: ${norm_team}_variable_)"
            for var in "${ALLOWED_VARS[@]}"; do
              full_var_name="${norm_team}_variable_${var}"
              # Fetch the value of the central repo's variable (if it exists)
              UPPER_VAR_NAME=$(echo "$full_var_name" | tr '[:lower:]' '[:upper:]')
              value=$(gh variable get "$UPPER_VAR_NAME" -R "$CENTRAL_REPO" -q .value 2>/dev/null || echo "")
              if [ -z "$value" ]; then
                echo "Skipped: No variable named '$UPPER_VAR_NAME' in central repository."
                continue
              fi
              if [ "$DRY_RUN" = "true" ]; then
                echo "[Dry-run] Would set variable '$var' in $repo (from central '$full_var_name')."
              else
                gh variable set "$var" -R "$repo" -b"$value"
                echo "âœ” Pushed variable '$var' to $repo."
              fi
            done
          done
