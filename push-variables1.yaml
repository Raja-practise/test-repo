name: Push Variables to Repositories

on:
  workflow_dispatch:
    inputs:
      team:
        description: 'Team name to push variables for (leave empty for all teams)'
        required: false
        type: string

jobs:
  push-variables:
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      github.ref_name == 'main' &&
      github.event.repository.fork == false
    runs-on: ubuntu-latest
    steps:
      - name: Setup jq
        shell: sh
        run: sudo apt-get update && sudo apt-get -y install jq

      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Validate repositories file
        shell: bash
        run: |
          if [ ! -f "repositories.txt" ]; then
            echo "Error: repositories.txt file not found"
            exit 1
          fi
          if [ ! -s "repositories.txt" ]; then
            echo "Error: repositories.txt is empty"
            exit 1
          fi

      - name: Push variables to repositories
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GHEC_BOT_TOKEN }}
          TEAM: ${{ github.event.inputs.team }}
        run: |
          # Filter out all variables that start with github_ (case insensitive)
          variables='{
            "TEST": "test"
          }'
          filtered_variables=$(echo "$variables" | jq 'with_entries(if (.key|test("^(?!github_).*$"; "i")) then { key: .key, value: .value } else empty end)')

          if [ "$(echo "$filtered_variables" | jq '. | length')" -eq 0 ]; then
            echo "Error: No valid variables found after filtering"
            exit 1
          fi

          # Read repositories from file
          readarray -t repositories < repositories.txt

          # Function to push variables to a repository
          push_variables_to_repo() {
            local repo=$1
            local variables_list=$2

            echo "Processing repository: $repo"
            for var_name in $(echo "$variables_list" | jq -r 'keys[]'); do
              value=$(echo "$variables_list" | jq -r --arg var "$var_name" '.[$var]')
              if [ -z "$value" ]; then
                echo "Warning: Empty value for variable $var_name, skipping"
                continue
              fi
              echo "Setting variable $var_name in $repo"
              gh variable set "$var_name" -R "$repo" -b "$value"
            done
          }

          # Process team-specific variables
          if [ -n "$TEAM" ]; then
            # Filter variables for the specific team
            team_variables=$(echo "$filtered_variables" | jq --arg team "$TEAM" 'with_entries(select(.key | startswith($team + "-")))')

            if [ "$(echo "$team_variables" | jq '. | length')" -eq 0 ]; then
              echo "No variables found for team $TEAM"
              exit 0
            fi

            # Get repositories for the team (assuming repositories.txt has team prefix in repo names)
            team_repos=($(grep "^$TEAM" repositories.txt))

            if [ ${#team_repos[@]} -eq 0 ]; then
              echo "No repositories found for team $TEAM"
              exit 0
            fi

            for repo in "${team_repos[@]}"; do
              if ! gh repo view "$repo" >/dev/null 2>&1; then
                echo "Error: Repository $repo does not exist or is not accessible"
                exit 1
              fi
              push_variables_to_repo "$repo" "$team_variables"
            done
          else
            # Process all teams
            # Get unique team prefixes from repository names
            teams=($(cut -d'/' -f1 repositories.txt | sort -u))

            for team in "${teams[@]}"; do
              echo "Processing team: $team"
              # Filter variables for this team
              team_variables=$(echo "$filtered_variables" | jq --arg team "$team" 'with_entries(select(.key | startswith($team + "-")))')

              if [ "$(echo "$team_variables" | jq '. | length')" -eq 0 ]; then
                echo "No variables found for team $team"
                continue
              fi

              # Get repositories for this team
              team_repos=($(grep "^$team" repositories.txt))

              if [ ${#team_repos[@]} -eq 0 ]; then
                echo "No repositories found for team $team"
                continue
              fi

              for repo in "${team_repos[@]}"; do
                if ! gh repo view "$repo" >/dev/null 2>&1; then
                  echo "Error: Repository $repo does not exist or is not accessible"
                  exit 1
                fi
                push_variables_to_repo "$repo" "$team_variables"
              done
            done
          fi
